apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: monitoring
  labels:
    app: prometheus
    component: rules
    game-service: "true"
data:
  # 게임 서비스 SLO 규칙
  game-service-slo-rules.yaml: |
    groups:
      - name: game-service-slo
        rules:
          # 게임 서버 가용성 SLO
          - record: slo:error_budget_burn_rate:game_server_availability
            expr: |
              (
                1 - (
                  sum(rate(game_requests_total{service="game-server", status_code!~"5..|4.."}[5m]))
                  /
                  sum(rate(game_requests_total{service="game-server"}[5m]))
                )
              )
              / (1 - 0.999)

          # 게임 플레이 오류율 SLO
          - record: slo:error_budget_burn_rate:game_play_error_rate
            expr: |
              (
                sum(rate(game_errors_total{service="game-server", error_type="gameplay"}[5m]))
                /
                sum(rate(game_requests_total{service="game-server"}[5m]))
              )
              / 0.001

          # 게임 매칭 성공률 SLO
          - record: slo:error_budget_burn_rate:game_matching_success_rate
            expr: |
              (
                1 - (
                  sum(rate(game_matching_requests_total{service="matchmaking", status="success"}[5m]))
                  /
                  sum(rate(game_matching_requests_total{service="matchmaking"}[5m]))
                )
              )
              / (1 - 0.95)

          # 게임 데이터 저장 성공률 SLO
          - record: slo:error_budget_burn_rate:game_data_persistence_success_rate
            expr: |
              (
                1 - (
                  sum(rate(game_data_save_total{service="game-persistence", status="success"}[5m]))
                  /
                  sum(rate(game_data_save_total{service="game-persistence"}[5m]))
                )
              )
              / (1 - 0.9999)

  # 게임 서비스 메트릭 규칙
  game-service-metrics-rules.yaml: |
    groups:
      - name: game-service-metrics
        rules:
          # 게임 서버 응답 시간 분위수
          - record: game:response_time:p50
            expr: histogram_quantile(0.5, sum(rate(game_action_duration_seconds_bucket{service="game-server"}[5m])) by (le))

          - record: game:response_time:p95
            expr: histogram_quantile(0.95, sum(rate(game_action_duration_seconds_bucket{service="game-server"}[5m])) by (le))

          - record: game:response_time:p99
            expr: histogram_quantile(0.99, sum(rate(game_action_duration_seconds_bucket{service="game-server"}[5m])) by (le))

          # 게임 서버 요청율
          - record: game:request_rate:total
            expr: sum(rate(game_requests_total{service="game-server"}[5m]))

          - record: game:request_rate:success
            expr: sum(rate(game_requests_total{service="game-server", status_code!~"5..|4.."}[5m]))

          - record: game:request_rate:error
            expr: sum(rate(game_requests_total{service="game-server", status_code=~"5..|4.."}[5m]))

          # 게임 서버 오류율
          - record: game:error_rate:total
            expr: sum(rate(game_errors_total{service="game-server"}[5m])) / sum(rate(game_requests_total{service="game-server"}[5m]))

          - record: game:error_rate:gameplay
            expr: sum(rate(game_errors_total{service="game-server", error_type="gameplay"}[5m])) / sum(rate(game_requests_total{service="game-server"}[5m]))

          # 게임 매칭 메트릭
          - record: game:matchmaking:success_rate
            expr: sum(rate(game_matching_requests_total{service="matchmaking", status="success"}[5m])) / sum(rate(game_matching_requests_total{service="matchmaking"}[5m]))

          - record: game:matchmaking:queue_size
            expr: sum(game_matchmaking_queue_size{service="matchmaking"})

          - record: game:matchmaking:duration:p50
            expr: histogram_quantile(0.5, sum(rate(game_match_duration_seconds_bucket{service="matchmaking"}[5m])) by (le))

          # 게임 데이터 저장 메트릭
          - record: game:data:save_success_rate
            expr: sum(rate(game_data_save_total{service="game-persistence", status="success"}[5m])) / sum(rate(game_data_save_total{service="game-persistence"}[5m]))

          - record: game:data:save_duration:p95
            expr: histogram_quantile(0.95, sum(rate(game_data_save_duration_seconds_bucket{service="game-persistence"}[5m])) by (le))

  # 게임 서비스 알람 규칙
  game-service-alert-rules.yaml: |
    groups:
      - name: game-service-alerts
        rules:
          # 게임 서버 고부하 알람
          - alert: GameServerHighLoad
            expr: game:request_rate:total > 1000
            for: 5m
            labels:
              severity: warning
              service: game-server
              team: game-sre
            annotations:
              summary: "게임 서버 고부하"
              description: "게임 서버 요청율이 1000 RPS를 초과했습니다."

          # 게임 서버 응답 시간 지연 알람
          - alert: GameServerResponseTimeHigh
            expr: game:response_time:p95 > 1.0
            for: 5m
            labels:
              severity: warning
              service: game-server
              team: game-sre
            annotations:
              summary: "게임 서버 응답 시간 지연"
              description: "게임 서버 p95 응답 시간이 1초를 초과했습니다."

          # 게임 매칭 큐 크기 알람
          - alert: GameMatchmakingQueueLarge
            expr: game:matchmaking:queue_size > 1000
            for: 10m
            labels:
              severity: warning
              service: matchmaking
              team: game-sre
            annotations:
              summary: "게임 매칭 큐 크기 증가"
              description: "게임 매칭 큐 크기가 1000을 초과했습니다."

          # 게임 데이터 저장 실패 알람
          - alert: GameDataSaveFailure
            expr: game:data:save_success_rate < 0.999
            for: 5m
            labels:
              severity: critical
              service: game-persistence
              team: game-sre
            annotations:
              summary: "게임 데이터 저장 실패율 증가"
              description: "게임 데이터 저장 성공률이 99.9% 미만입니다."

  # 인프라 모니터링 규칙
  infrastructure-monitoring-rules.yaml: |
    groups:
      - name: infrastructure-monitoring
        rules:
          # 노드 CPU 사용률 알람
          - alert: NodeCPUHigh
            expr: 100 - (avg by (instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 90
            for: 5m
            labels:
              severity: warning
              team: game-sre
            annotations:
              summary: "노드 CPU 사용률 높음"
              description: "노드 {{ $labels.instance }}의 CPU 사용률이 90%를 초과했습니다."

          # 노드 메모리 사용률 알람
          - alert: NodeMemoryHigh
            expr: (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100 > 90
            for: 5m
            labels:
              severity: warning
              team: game-sre
            annotations:
              summary: "노드 메모리 사용률 높음"
              description: "노드 {{ $labels.instance }}의 메모리 사용률이 90%를 초과했습니다."

          # 파드 재시작 알람
          - alert: PodRestartFrequent
            expr: increase(kube_pod_container_status_restarts_total{namespace=~"game-production|game-sre"}[1h]) > 5
            for: 5m
            labels:
              severity: warning
              team: game-sre
            annotations:
              summary: "파드 빈번한 재시작"
              description: "파드 {{ $labels.pod }}가 1시간 내에 5회 이상 재시작되었습니다."

          # 서비스 엔드포인트 부족 알람
          - alert: ServiceEndpointsInsufficient
            expr: kube_endpoint_addresses_available{namespace=~"game-production|game-sre"} < 2
            for: 5m
            labels:
              severity: warning
              team: game-sre
            annotations:
              summary: "서비스 엔드포인트 부족"
              description: "서비스 {{ $labels.service }}의 사용 가능한 엔드포인트가 2개 미만입니다."
